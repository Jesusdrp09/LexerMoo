// Generated automatically by nearley, version 2.20.1
// http://github.com/Hardmath123/nearley
(function () {
function id(x) { return x[0]; }

const moo = require('moo');
const {compile} = moo;

const lexer = compile({
    asignacion: ['<<<'],
    tipoVariable: ['entero', 'logico', 'decimalL', 'decimalC'],
    operadores: ['+', '-', '*', '/'],
    operadoresLogicos: ['menorQue', 'mayorQue', 'igualQue', 'menorIgualQue', 'mayorIgualQue', 'diferenteQue'],
    operadoresCortos: ["mas mas", "menos menos"],
    keyword: ['Para', 'mientrasQue', 'si', "sin't", 'caso', 'retornar', 'impresion#', 'salto'],
    WS:      /[ \t]{1,}/,
    comment: /\/\/.*?$/,
    numberDecimal:  /[0-9]+\.{0,1}[0-9]+/,
    number: /[0-9]+/,
    stringQuotes:  /"(?:\\["\\]|[^\n"\\])*"/,
    string:  /[a-zA-Z]+/,
    lparen:  '(',
    rparen:  ')',
    lbracket: '{',
    rbracket: '}',
    finLinea: '|',
    characterKey: ['#', ','],
    NL:      { match: /\n/, lineBreaks: true },
});
var grammar = {
    Lexer: lexer,
    ParserRules: [
    {"name": "input", "symbols": [{"literal":","}, "findelinea", "statements", "findelinea", {"literal":","}], "postprocess": (d) => console.log(''+d[2]+';')},
    {"name": "statement", "symbols": ["ifStatement", {"literal":"|"}], "postprocess": (d) => d[0]},
    {"name": "ifStatement$subexpression$1", "symbols": ["espacioEnBlanco"]},
    {"name": "ifStatement$subexpression$1", "symbols": []},
    {"name": "ifStatement$subexpression$2", "symbols": ["espacioEnBlanco"]},
    {"name": "ifStatement$subexpression$2", "symbols": []},
    {"name": "ifStatement$subexpression$3", "symbols": ["espacioEnBlanco"]},
    {"name": "ifStatement$subexpression$3", "symbols": []},
    {"name": "ifStatement$ebnf$1", "symbols": []},
    {"name": "ifStatement$ebnf$1$subexpression$1", "symbols": [(lexer.has("NL") ? {type: "NL"} : NL)]},
    {"name": "ifStatement$ebnf$1$subexpression$1", "symbols": [(lexer.has("WS") ? {type: "WS"} : WS)]},
    {"name": "ifStatement$ebnf$1", "symbols": ["ifStatement$ebnf$1", "ifStatement$ebnf$1$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ifStatement$ebnf$2", "symbols": []},
    {"name": "ifStatement$ebnf$2$subexpression$1", "symbols": [(lexer.has("NL") ? {type: "NL"} : NL)]},
    {"name": "ifStatement$ebnf$2$subexpression$1", "symbols": [(lexer.has("WS") ? {type: "WS"} : WS)]},
    {"name": "ifStatement$ebnf$2", "symbols": ["ifStatement$ebnf$2", "ifStatement$ebnf$2$subexpression$1"], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "ifStatement", "symbols": [{"literal":"si"}, "ifStatement$subexpression$1", (lexer.has("lparen") ? {type: "lparen"} : lparen), "operacionlogica", (lexer.has("rparen") ? {type: "rparen"} : rparen), "ifStatement$subexpression$2", {"literal":"entonces"}, "ifStatement$subexpression$3", (lexer.has("lbracket") ? {type: "lbracket"} : lbracket), "ifStatement$ebnf$1", "statements", "ifStatement$ebnf$2", (lexer.has("rbracket") ? {type: "rbracket"} : rbracket)], "postprocess": (d) => 'if('+d[3]+'){'+d[10]+'}'},
    {"name": "statements", "symbols": ["statement"]},
    {"name": "statements$subexpression$1", "symbols": [(lexer.has("NL") ? {type: "NL"} : NL)]},
    {"name": "statements$subexpression$1", "symbols": []},
    {"name": "statements", "symbols": ["statements", "statements$subexpression$1", "statement"], "postprocess": (d) => d[0]+'; '+d[2]},
    {"name": "statement", "symbols": ["operacion"]},
    {"name": "statement", "symbols": ["impStatement"]},
    {"name": "statement", "symbols": ["declaracion"]},
    {"name": "impStatement", "symbols": [{"literal":"impresion#"}, "imp", "findelinea"], "postprocess": (d) => 'console.log('+d[1]+')'},
    {"name": "imp", "symbols": [(lexer.has("string") ? {type: "string"} : string)], "postprocess": (d) => d[0]},
    {"name": "imp", "symbols": ["operacion"], "postprocess": (d) => '('+d[0]+')'},
    {"name": "imp", "symbols": [(lexer.has("stringQuotes") ? {type: "stringQuotes"} : stringQuotes)], "postprocess": (d) => d[0]},
    {"name": "imp", "symbols": ["imp", {"literal":"#"}, "imp"], "postprocess": (d) => d[0]+'+'+d[2]},
    {"name": "operacion$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacion$subexpression$1", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacion$subexpression$2", "symbols": ["espacioEnBlanco"]},
    {"name": "operacion$subexpression$2", "symbols": []},
    {"name": "operacion$subexpression$3", "symbols": ["espacioEnBlanco"]},
    {"name": "operacion$subexpression$3", "symbols": []},
    {"name": "operacion$subexpression$4$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacion$subexpression$4$subexpression$1", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacion$subexpression$4", "symbols": ["operacion$subexpression$4$subexpression$1"]},
    {"name": "operacion$subexpression$4", "symbols": ["operacion"]},
    {"name": "operacion", "symbols": ["operacion$subexpression$1", "operacion$subexpression$2", {"literal":"+"}, "operacion$subexpression$3", "operacion$subexpression$4", "findelinea"], "postprocess": (d) => ''+d[0]+'+'+d[4]+''},
    {"name": "operacion$subexpression$5", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacion$subexpression$5", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacion$subexpression$6", "symbols": ["espacioEnBlanco"]},
    {"name": "operacion$subexpression$6", "symbols": []},
    {"name": "operacion$subexpression$7", "symbols": ["espacioEnBlanco"]},
    {"name": "operacion$subexpression$7", "symbols": []},
    {"name": "operacion$subexpression$8$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacion$subexpression$8$subexpression$1", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacion$subexpression$8", "symbols": ["operacion$subexpression$8$subexpression$1"]},
    {"name": "operacion$subexpression$8", "symbols": ["operacion"]},
    {"name": "operacion", "symbols": ["operacion$subexpression$5", "operacion$subexpression$6", {"literal":"-"}, "operacion$subexpression$7", "operacion$subexpression$8", "findelinea"], "postprocess": (d) => ''+d[0]+'-'+d[4]+''},
    {"name": "operacion$subexpression$9", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacion$subexpression$9", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacion$subexpression$10", "symbols": ["espacioEnBlanco"]},
    {"name": "operacion$subexpression$10", "symbols": []},
    {"name": "operacion$subexpression$11", "symbols": ["espacioEnBlanco"]},
    {"name": "operacion$subexpression$11", "symbols": []},
    {"name": "operacion$subexpression$12$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacion$subexpression$12$subexpression$1", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacion$subexpression$12", "symbols": ["operacion$subexpression$12$subexpression$1"]},
    {"name": "operacion$subexpression$12", "symbols": ["operacion"]},
    {"name": "operacion", "symbols": ["operacion$subexpression$9", "operacion$subexpression$10", {"literal":"*"}, "operacion$subexpression$11", "operacion$subexpression$12", "findelinea"], "postprocess": (d) => ''+d[0]+'*'+d[4]+''},
    {"name": "operacion$subexpression$13", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacion$subexpression$13", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacion$subexpression$14", "symbols": ["espacioEnBlanco"]},
    {"name": "operacion$subexpression$14", "symbols": []},
    {"name": "operacion$subexpression$15", "symbols": ["espacioEnBlanco"]},
    {"name": "operacion$subexpression$15", "symbols": []},
    {"name": "operacion$subexpression$16$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacion$subexpression$16$subexpression$1", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacion$subexpression$16", "symbols": ["operacion$subexpression$16$subexpression$1"]},
    {"name": "operacion$subexpression$16", "symbols": ["operacion"]},
    {"name": "operacion", "symbols": ["operacion$subexpression$13", "operacion$subexpression$14", {"literal":"/"}, "operacion$subexpression$15", "operacion$subexpression$16", "findelinea"], "postprocess": (d) => ''+d[0]+'/'+d[4]+''},
    {"name": "operacionlogica$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacionlogica$subexpression$1", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacionlogica$subexpression$2", "symbols": ["espacioEnBlanco"]},
    {"name": "operacionlogica$subexpression$2", "symbols": []},
    {"name": "operacionlogica$subexpression$3", "symbols": ["espacioEnBlanco"]},
    {"name": "operacionlogica$subexpression$3", "symbols": []},
    {"name": "operacionlogica$subexpression$4$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacionlogica$subexpression$4$subexpression$1", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacionlogica$subexpression$4", "symbols": ["operacionlogica$subexpression$4$subexpression$1"]},
    {"name": "operacionlogica$subexpression$4", "symbols": ["operacionlogica"]},
    {"name": "operacionlogica", "symbols": ["operacionlogica$subexpression$1", "operacionlogica$subexpression$2", {"literal":"mayorQue"}, "operacionlogica$subexpression$3", "operacionlogica$subexpression$4", "findelinea"], "postprocess": (d) => ''+d[0]+'>'+d[4]+''},
    {"name": "operacionlogica$subexpression$5", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacionlogica$subexpression$5", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacionlogica$subexpression$6", "symbols": ["espacioEnBlanco"]},
    {"name": "operacionlogica$subexpression$6", "symbols": []},
    {"name": "operacionlogica$subexpression$7", "symbols": ["espacioEnBlanco"]},
    {"name": "operacionlogica$subexpression$7", "symbols": []},
    {"name": "operacionlogica$subexpression$8$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacionlogica$subexpression$8$subexpression$1", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacionlogica$subexpression$8", "symbols": ["operacionlogica$subexpression$8$subexpression$1"]},
    {"name": "operacionlogica$subexpression$8", "symbols": ["operacionlogica"]},
    {"name": "operacionlogica", "symbols": ["operacionlogica$subexpression$5", "operacionlogica$subexpression$6", {"literal":"menorQue"}, "operacionlogica$subexpression$7", "operacionlogica$subexpression$8", "findelinea"], "postprocess": (d) => ''+d[0]+'<'+d[4]+''},
    {"name": "operacionlogica$subexpression$9", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacionlogica$subexpression$9", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacionlogica$subexpression$10", "symbols": ["espacioEnBlanco"]},
    {"name": "operacionlogica$subexpression$10", "symbols": []},
    {"name": "operacionlogica$subexpression$11", "symbols": ["espacioEnBlanco"]},
    {"name": "operacionlogica$subexpression$11", "symbols": []},
    {"name": "operacionlogica$subexpression$12$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacionlogica$subexpression$12$subexpression$1", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacionlogica$subexpression$12", "symbols": ["operacionlogica$subexpression$12$subexpression$1"]},
    {"name": "operacionlogica$subexpression$12", "symbols": ["operacionlogica"]},
    {"name": "operacionlogica", "symbols": ["operacionlogica$subexpression$9", "operacionlogica$subexpression$10", {"literal":"mayorIgualQue"}, "operacionlogica$subexpression$11", "operacionlogica$subexpression$12", "findelinea"], "postprocess": (d) => ''+d[0]+'>='+d[4]+''},
    {"name": "operacionlogica$subexpression$13", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacionlogica$subexpression$13", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacionlogica$subexpression$14", "symbols": ["espacioEnBlanco"]},
    {"name": "operacionlogica$subexpression$14", "symbols": []},
    {"name": "operacionlogica$subexpression$15", "symbols": ["espacioEnBlanco"]},
    {"name": "operacionlogica$subexpression$15", "symbols": []},
    {"name": "operacionlogica$subexpression$16$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacionlogica$subexpression$16$subexpression$1", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacionlogica$subexpression$16", "symbols": ["operacionlogica$subexpression$16$subexpression$1"]},
    {"name": "operacionlogica$subexpression$16", "symbols": ["operacionlogica"]},
    {"name": "operacionlogica", "symbols": ["operacionlogica$subexpression$13", "operacionlogica$subexpression$14", {"literal":"menorIgualQue"}, "operacionlogica$subexpression$15", "operacionlogica$subexpression$16", "findelinea"], "postprocess": (d) => ''+d[0]+'<='+d[4]+''},
    {"name": "operacionlogica$subexpression$17", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacionlogica$subexpression$17", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacionlogica$subexpression$18", "symbols": ["espacioEnBlanco"]},
    {"name": "operacionlogica$subexpression$18", "symbols": []},
    {"name": "operacionlogica$subexpression$19", "symbols": ["espacioEnBlanco"]},
    {"name": "operacionlogica$subexpression$19", "symbols": []},
    {"name": "operacionlogica$subexpression$20$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacionlogica$subexpression$20$subexpression$1", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacionlogica$subexpression$20", "symbols": ["operacionlogica$subexpression$20$subexpression$1"]},
    {"name": "operacionlogica$subexpression$20", "symbols": ["operacionlogica"]},
    {"name": "operacionlogica", "symbols": ["operacionlogica$subexpression$17", "operacionlogica$subexpression$18", {"literal":"igualQue"}, "operacionlogica$subexpression$19", "operacionlogica$subexpression$20", "findelinea"], "postprocess": (d) => ''+d[0]+'=='+d[4]+''},
    {"name": "operacionlogica$subexpression$21", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacionlogica$subexpression$21", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacionlogica$subexpression$22", "symbols": ["espacioEnBlanco"]},
    {"name": "operacionlogica$subexpression$22", "symbols": []},
    {"name": "operacionlogica$subexpression$23", "symbols": ["espacioEnBlanco"]},
    {"name": "operacionlogica$subexpression$23", "symbols": []},
    {"name": "operacionlogica$subexpression$24$subexpression$1", "symbols": [(lexer.has("string") ? {type: "string"} : string)]},
    {"name": "operacionlogica$subexpression$24$subexpression$1", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "operacionlogica$subexpression$24", "symbols": ["operacionlogica$subexpression$24$subexpression$1"]},
    {"name": "operacionlogica$subexpression$24", "symbols": ["operacionlogica"]},
    {"name": "operacionlogica", "symbols": ["operacionlogica$subexpression$21", "operacionlogica$subexpression$22", {"literal":"diferenteQue"}, "operacionlogica$subexpression$23", "operacionlogica$subexpression$24", "findelinea"], "postprocess": (d) => ''+d[0]+'!='+d[4]+''},
    {"name": "declaracion$subexpression$1", "symbols": ["espacioEnBlanco"]},
    {"name": "declaracion$subexpression$1", "symbols": []},
    {"name": "declaracion$subexpression$2", "symbols": ["espacioEnBlanco"]},
    {"name": "declaracion$subexpression$2", "symbols": []},
    {"name": "declaracion$subexpression$3", "symbols": ["espacioEnBlanco"]},
    {"name": "declaracion$subexpression$3", "symbols": []},
    {"name": "declaracion", "symbols": [{"literal":"entero"}, "declaracion$subexpression$1", (lexer.has("string") ? {type: "string"} : string), "declaracion$subexpression$2", {"literal":"<<<"}, "declaracion$subexpression$3", (lexer.has("number") ? {type: "number"} : number), "findelinea"], "postprocess": (d) => 'let '+d[2]+' = '+d[6]+''},
    {"name": "declaracion$subexpression$4", "symbols": ["espacioEnBlanco"]},
    {"name": "declaracion$subexpression$4", "symbols": []},
    {"name": "declaracion$subexpression$5", "symbols": ["espacioEnBlanco"]},
    {"name": "declaracion$subexpression$5", "symbols": []},
    {"name": "declaracion$subexpression$6", "symbols": ["espacioEnBlanco"]},
    {"name": "declaracion$subexpression$6", "symbols": []},
    {"name": "declaracion$subexpression$7", "symbols": [{"literal":"true"}]},
    {"name": "declaracion$subexpression$7", "symbols": [{"literal":"false"}]},
    {"name": "declaracion", "symbols": [{"literal":"logico"}, "declaracion$subexpression$4", (lexer.has("string") ? {type: "string"} : string), "declaracion$subexpression$5", {"literal":"<<<"}, "declaracion$subexpression$6", "declaracion$subexpression$7", "findelinea"], "postprocess": (d) => 'let '+d[2]+' = '+d[6]+''},
    {"name": "declaracion$subexpression$8", "symbols": [{"literal":"decimalC"}]},
    {"name": "declaracion$subexpression$8", "symbols": [{"literal":"decimalL"}]},
    {"name": "declaracion$subexpression$9", "symbols": ["espacioEnBlanco"]},
    {"name": "declaracion$subexpression$9", "symbols": []},
    {"name": "declaracion$subexpression$10", "symbols": ["espacioEnBlanco"]},
    {"name": "declaracion$subexpression$10", "symbols": []},
    {"name": "declaracion$subexpression$11", "symbols": ["espacioEnBlanco"]},
    {"name": "declaracion$subexpression$11", "symbols": []},
    {"name": "declaracion$subexpression$12", "symbols": [(lexer.has("numberDecimal") ? {type: "numberDecimal"} : numberDecimal)]},
    {"name": "declaracion$subexpression$12", "symbols": [(lexer.has("number") ? {type: "number"} : number)]},
    {"name": "declaracion", "symbols": ["declaracion$subexpression$8", "declaracion$subexpression$9", (lexer.has("string") ? {type: "string"} : string), "declaracion$subexpression$10", {"literal":"<<<"}, "declaracion$subexpression$11", "declaracion$subexpression$12", "findelinea"], "postprocess": (d) => 'let '+d[2]+' = '+d[6]+''},
    {"name": "findelinea", "symbols": ["espacioEnBlanco"]},
    {"name": "findelinea$ebnf$1", "symbols": []},
    {"name": "findelinea$ebnf$1", "symbols": ["findelinea$ebnf$1", (lexer.has("NL") ? {type: "NL"} : NL)], "postprocess": function arrpush(d) {return d[0].concat([d[1]]);}},
    {"name": "findelinea", "symbols": ["findelinea$ebnf$1"], "postprocess": (d) => ''},
    {"name": "findelinea", "symbols": [(lexer.has("finLinea") ? {type: "finLinea"} : finLinea), "findelinea"], "postprocess": (d) => ';'},
    {"name": "espacioEnBlanco", "symbols": [(lexer.has("WS") ? {type: "WS"} : WS)], "postprocess": (d) => ' '}
]
  , ParserStart: "input"
}
if (typeof module !== 'undefined'&& typeof module.exports !== 'undefined') {
   module.exports = grammar;
} else {
   window.grammar = grammar;
}
})();
